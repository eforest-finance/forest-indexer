// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_adapter_contract.proto
// </auto-generated>
// Original file comments:
// This files is part of the Hello World smart contract example that is included in Boilerplate.
// It is only the definition of the contract, implementation is located in the "contract" folder
// and tests are located in the "test" folder.
//
// You can use this as a basic template for new contracts.
// 
// When building Boilerplate or the contract project located in the "../contract/AElf.Contracts.TokenAdapterContract/" 
// protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
// "../contract/AElf.Contracts.TokenAdapterContract/Protobuf/Generated/" folder. 
//
// the version of the language, use proto3 for contracts
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Collections.Generic;
using aelf = global::AElf.CSharp.Core;

namespace AElf.Contracts.TokenAdapterContract {

  #region Events
  public partial class ManagerTokenCreated : aelf::IEvent<ManagerTokenCreated>
  {
    public global::System.Collections.Generic.IEnumerable<ManagerTokenCreated> GetIndexed()
    {
      return new List<ManagerTokenCreated>
      {
      };
    }

    public ManagerTokenCreated GetNonIndexed()
    {
      return new ManagerTokenCreated
      {
        Symbol = Symbol,
        Amount = Amount,
        Memo = Memo,
        TokenName = TokenName,
        TotalSupply = TotalSupply,
        Decimals = Decimals,
        Issuer = Issuer,
        IsBurnable = IsBurnable,
        IssueChainId = IssueChainId,
        ExternalInfo = ExternalInfo,
        OriginTractionId = OriginTractionId,
        OwnerManagerList = OwnerManagerList,
        OwnerChainId = OwnerChainId,
        OwnerVirtualHash = OwnerVirtualHash,
        IssuerManagerList = IssuerManagerList,
        IssuerChainId = IssuerChainId,
        IssuerVirtualHash = IssuerVirtualHash,
        Owner = Owner,
        RealOwner = RealOwner,
        RealIssuer = RealIssuer,
      };
    }
  }

  #endregion
  /// <summary>
  /// the contract definition: a gRPC service definition.
  /// </summary>
  public static partial class TokenAdapterContractContainer
  {
    static readonly string __ServiceName = "TokenAdapterContract";

    #region Marshallers
    static readonly aelf::Marshaller<global::AElf.Types.Address> __Marshaller_aelf_Address = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Types.Address.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::AElf.Contracts.TokenAdapterContract.ManagerCreateTokenInput> __Marshaller_ManagerCreateTokenInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Contracts.TokenAdapterContract.ManagerCreateTokenInput.Parser.ParseFrom);
    #endregion

    #region Methods
    static readonly aelf::Method<global::AElf.Types.Address, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Initialize = new aelf::Method<global::AElf.Types.Address, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Initialize",
        __Marshaller_aelf_Address,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::AElf.Contracts.TokenAdapterContract.ManagerCreateTokenInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateToken = new aelf::Method<global::AElf.Contracts.TokenAdapterContract.ManagerCreateTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "CreateToken",
        __Marshaller_ManagerCreateTokenInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::AElf.Types.Address, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetProxyAccountContractAddress = new aelf::Method<global::AElf.Types.Address, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetProxyAccountContractAddress",
        __Marshaller_aelf_Address,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Types.Address> __Method_GetProxyAccountContractAddress = new aelf::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Types.Address>(
        aelf::MethodType.View,
        __ServiceName,
        "GetProxyAccountContractAddress",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_aelf_Address);

    #endregion

    #region Descriptors
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AElf.Contracts.TokenAdapterContract.TokenAdapterContractReflection.Descriptor.Services[0]; }
    }

    public static global::System.Collections.Generic.IReadOnlyList<global::Google.Protobuf.Reflection.ServiceDescriptor> Descriptors
    {
      get
      {
        return new global::System.Collections.Generic.List<global::Google.Protobuf.Reflection.ServiceDescriptor>()
        {
          global::AElf.Standards.ACS12.Acs12Reflection.Descriptor.Services[0],
          global::AElf.Contracts.TokenAdapterContract.TokenAdapterContractReflection.Descriptor.Services[0],
        };
      }
    }
    #endregion

    /// <summary>Base class for the contract of TokenAdapterContract</summary>
    // public abstract partial class TokenAdapterContractBase : AElf.Sdk.CSharp.CSharpSmartContract<AElf.Contracts.TokenAdapterContract.TokenAdapterContractState>
    // {
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Initialize(global::AElf.Types.Address input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }

      // public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateToken(global::AElf.Contracts.TokenAdapterContract.ManagerCreateTokenInput input)
      // {
      //   throw new global::System.NotImplementedException();
      // }

      // public virtual global::Google.Protobuf.WellKnownTypes.Empty SetProxyAccountContractAddress(global::AElf.Types.Address input)
      // {
      //   throw new global::System.NotImplementedException();
      // }
      //
      // public virtual global::AElf.Types.Address GetProxyAccountContractAddress(global::Google.Protobuf.WellKnownTypes.Empty input)
      // {
      //   throw new global::System.NotImplementedException();
      // }

    }

    // public static aelf::ServerServiceDefinition BindService(TokenAdapterContractBase serviceImpl)
    // {
    //   return aelf::ServerServiceDefinition.CreateBuilder()
    //       .AddDescriptors(Descriptors)
    //       .AddMethod(__Method_Initialize, serviceImpl.Initialize)
    //       .AddMethod(__Method_CreateToken, serviceImpl.CreateToken)
    //       .AddMethod(__Method_SetProxyAccountContractAddress, serviceImpl.SetProxyAccountContractAddress)
    //       .AddMethod(__Method_GetProxyAccountContractAddress, serviceImpl.GetProxyAccountContractAddress).Build();
    // }

  //}
}
#endregion

